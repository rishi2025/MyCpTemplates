class DSU
{
public:
    vector<int> rank, parent, size;
    DSU(int n)
    {
        rank.resize(n, 0);
        size.resize(n, 1);
        parent.resize(n);

        for (int i = 0; i < n; i++)
            parent[i] = i;
    }

    int findParent(int u)
    {
        if (parent[u] == u)
            return u;
        // Path Compression
        return parent[u] = findParent(parent[u]);
    }

    void mergeRank(int u, int v)
    {
        int pu = findParent(u);
        int pv = findParent(v);
        if (pu == pv)
            return;

        if (rank[pu] > rank[pv])
            parent[pv] = pu;
        else if (rank[pu] < rank[pv])
            parent[pu] = pv;
        else
            parent[pu] = pv, rank[pv]++;
    }

    void mergeSize(int u, int v)
    {
        int pu = findParent(u);
        int pv = findParent(v);
        if (pu == pv)
            return;

        if (size[pu] > size[pv])
            parent[pv] = pu, size[pu] += size[pv];
        else if (size[pu] < size[pv])
            parent[pu] = pv, size[pv] += size[pu];
        else
            parent[pu] = pv, size[pv] += size[pu];
    }

    int numberOfComponents()
    {
        int components = 0;
        for (int i = 0; i < parent.size(); i++)
            components += (parent[i] == i);
        return components;
    }
};
