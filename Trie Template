class TrieNode {
public:
    bool isComplete;
    vector<TrieNode*> children;
    
    TrieNode()
    {
        isComplete = false;
        children.resize(26, NULL);
    }
};

class Trie {
    TrieNode* root;

public:
    Trie() {
        root = new TrieNode();
    }
    
    void insert(string word) {
        TrieNode* ptr = root;

        for (int i = 0; i < word.size(); i++)
        {
            if (!ptr -> children[word[i] - 'a'])
                ptr -> children[word[i] - 'a'] = new TrieNode();

            ptr = ptr -> children[word[i] - 'a'];
        }

        ptr -> isComplete = true;
    }
    
    bool search(string word) {
        TrieNode* ptr = root;

        for (int i = 0; i < word.size(); i++)
        {
            if (!ptr -> children[word[i] - 'a'])
                return false;

            ptr = ptr -> children[word[i] - 'a'];
        }

        return ptr -> isComplete;
    }
    
    bool startsWith(string prefix) {
        TrieNode* ptr = root;

        for (int i = 0; i < prefix.size(); i++)
        {
            if (!ptr -> children[prefix[i] - 'a'])
                return false;

            ptr = ptr -> children[prefix[i] - 'a'];
        }

        return true;
    }
};
