class Segment_Tree 
{
private:
    vector<int> seg;

public:
    Segment_Tree (int n) {
        seg.resize(4 * n + 5);
    }

    void build (vector<int>& arr, int low, int high, int i)
    {
        if (low == high)
        {
            seg[i] = arr[low];
            return;
        }

        int mid = (low + high) >> 1;
        build(arr, low, mid, 2 * i + 1);
        build(arr, mid + 1, high, 2 * i + 2);

        seg[i] = seg[2 * i + 1] + seg[2 * i + 2];
    }

    int query (int i, int low, int high, int l, int r)
    {
        if (r < low || l > high)
            return 0;

        if (l <= low && r >= high)
            return seg[i];

        int mid = (low + high) >> 1;
        int left = query(2 * i + 1, low, mid, l, r);
        int right = query(2 * i + 2, mid + 1, high, l, r);

        return left + right;
    }

    void update (int i, int low, int high, int index, int val)
    {
        if (low == high)
        {
            seg[i] = val;
            return;
        }

        int mid = (low + high) >> 1;
        if (index <= mid)
            update(2 * i + 1, low, mid, index, val);
        else
            update(2 * i + 2, mid + 1, high, index, val);

        seg[i] = seg[2 * i + 1] + seg[2 * i + 2];
    }

    void display()
    {
        cout << "SEGMENT TREE: ";
        for (auto it: seg)
            cout << it << ' ';
        cout << endl;
    }
};
