class Manacher
{
public:
    vector<int> lss;
    string mstr;

    void runManacher(string s)
    {
        mstr = s;
        lss.resize(s.size(), 1);
        int l = 1, r = 1;

        for (int i = 1; i < s.size(); i++)
        {
            if (l + r - i >= 0)
                lss[i] = max((int)0, min(r - i, lss[l + r - i]));

            while ((i + lss[i] < s.size()) && (i - lss[i] >= 0) && (s[i + lss[i]] == s[i - lss[i]]))
                lss[i]++;

            if (i + lss[i] > r)
                l = i - lss[i], r = i + lss[i];
        }
    }

    void build(string &s)
    {
        string t;
        for (int i = 0; i < s.size(); i++)
            t += string("#") + s[i];

        runManacher(t + "#");
    }

    int getLongestPalindString(int centre, int parity)
    {
        int index = 2 * centre + 1 + (parity % 2 == 0);
        return lss[index] - 1;
    }

    bool checkPalind(int l, int r)
    {
        if (r - l + 1 <= getLongestPalindString((l + r) / 2, l % 2 == r % 2))
            return true;
        return false;
    }

    void display()
    {
        cout << "LSS: ";
        for (auto it : lss)
            cout << it << ' ';

        cout << endl << "MSTR: " << mstr << endl;
    }
};
